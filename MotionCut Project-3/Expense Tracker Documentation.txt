# Expense Tracker Documentation

## Overview
The Expense Tracker is a simple Python program that allows users to record, view, and summarize their expenses. It stores expense data in a JSON file (`expenses.json`) and provides a menu-driven interface for user interaction.

## Features
- **Add Expense**: Users can record new expenses by specifying the amount, category, and description.
- **View Expenses**: Users can list all recorded expenses.
- **View Summary**: Users can see a category-wise summary of total expenses.
- **Data Persistence**: Expenses are stored in a JSON file for future reference.

## Program Structure
The program is implemented using a class-based approach with `ExpenseTracker` as the main class.

### 1. `ExpenseTracker` Class
This class handles expense storage, retrieval, and processing.

#### **Attributes**
- `filename`: Stores the name of the JSON file where expenses are saved.
- `expenses`: A list of recorded expenses, loaded from the file.

#### **Methods**
1. **`__init__(self, filename='expenses.json')`**
   - Initializes the tracker with the specified file name.
   - Calls `load_expenses()` to load existing data.

2. **`load_expenses(self)`**
   - Reads and loads expenses from the JSON file.
   - Returns an empty list if the file doesn't exist or contains invalid data.

3. **`save_expenses(self)`**
   - Writes the current list of expenses to the JSON file in a structured format.

4. **`add_expense(self, amount, category, description)`**
   - Records a new expense entry with the given details.
   - Saves the updated expense list to the file.
   - Prints a confirmation message.

5. **`view_expenses(self)`**
   - Displays all recorded expenses in a readable format.
   - Prints a message if no expenses exist.

6. **`view_summary(self)`**
   - Computes total expenses for each category.
   - Prints a formatted summary of expenses.

### 2. User Interaction (Main Menu)
The program runs an interactive menu allowing users to:
1. Add an expense
2. View recorded expenses
3. View an expense summary
4. Exit the program

#### **Main Loop Logic**
- Continuously displays the menu until the user chooses to exit.
- Handles user input to call appropriate class methods.
- Validates input and provides feedback for invalid choices.

## Usage
1. Run the script.
2. Select an option from the menu by entering a number.
3. Follow prompts to enter expense details when required.
4. View expenses or summaries as needed.
5. Exit when done; expenses remain saved for future sessions.

This documentation provides a clear understanding of the program's functionality, ensuring ease of use and modification.

